[gd_scene load_steps=17 format=2]

[ext_resource path="res://LevelBedroom.png" type="Texture" id=1]
[ext_resource path="res://Player/Player.tscn" type="PackedScene" id=2]
[ext_resource path="res://Player/help.PNG" type="Texture" id=3]
[ext_resource path="res://Temp/FranSprite.png" type="Texture" id=4]
[ext_resource path="res://addons/hivemake/Perspective2D.gd" type="Script" id=5]
[ext_resource path="res://core/res/InteractiveItem.gd" type="Script" id=6]
[ext_resource path="res://core/res/ItemData.gd" type="Script" id=7]
[ext_resource path="res://Levels/Level.gd" type="Script" id=8]

[sub_resource type="NavigationPolygon" id=1]
vertices = PoolVector2Array( -113, -29, 63, -61, 168, -49, -16, 16, -92, 19, -92, 38, -16, 32, 136, 88, -16, 168, -40, 168, -174, 77 )
polygons = [ PoolIntArray( 0, 1, 2, 3, 4 ), PoolIntArray( 5, 6, 7, 8, 9, 10 ), PoolIntArray( 4, 3, 6, 5 ) ]
outlines = [ PoolVector2Array( -40, 168, -16, 168, 136, 88, -16, 32, -16, 16, 168, -49, 63, -61, -113, -29, -92, 19, -92, 38, -174, 77 ) ]

[sub_resource type="Resource" id=2]
script = ExtResource( 7 )
name = "hall"
dialogue_bank = [  ]
primary_interaction = 4
secondary_interaction = 0
bonus_values = {
}

[sub_resource type="GDScript" id=3]
script/source = "extends Resource
class_name ItemData

enum InteractionMode { NONE, EXAMINE, CAPTCHA, WALK, ENTER }
# Simple string data for UI displays.
export (String) var name
export (Array, String, MULTILINE) var dialogue_bank
# LMB and RMB based interactions, used to reduce amount of boolean logic.
export (InteractionMode) var primary_interaction
export (InteractionMode) var secondary_interaction
export (Dictionary) var bonus_values

func get_dialogue(idx: int) -> String:
	if idx > dialogue_bank: return \"\"
	return dialogue_bank[idx]

func get_action_name(idx: int) -> String:
	match idx:
		0:
			return str(InteractionMode.keys()[primary_interaction])
		1:
			return str(InteractionMode.keys()[secondary_interaction])
	return \"\"
"

[sub_resource type="Resource" id=4]
script = SubResource( 3 )
name = "hall"
dialogue_bank = [  ]
primary_interaction = 4
secondary_interaction = 0
bonus_values = {
}

[sub_resource type="GDScript" id=5]
script/source = "extends Resource
class_name ItemData

enum InteractionMode { NONE, EXAMINE, CAPTCHA, WALK, ENTER }
# Simple string data for UI displays.
export (String) var name
export (Array, String, MULTILINE) var dialogue_bank
# LMB and RMB based interactions, used to reduce amount of boolean logic.
export (InteractionMode) var primary_interaction
export (InteractionMode) var secondary_interaction
export (Dictionary) var bonus_values

func get_dialogue(idx: int) -> String:
	if idx > dialogue_bank: return \"\"
	return dialogue_bank[idx]

func get_action_name(idx: int) -> String:
	match idx:
		0:
			return str(InteractionMode.keys()[primary_interaction])
		1:
			return str(InteractionMode.keys()[secondary_interaction])
	return \"\"
"

[sub_resource type="Resource" id=6]
script = SubResource( 5 )
name = "hall"
dialogue_bank = [  ]
primary_interaction = 4
secondary_interaction = 0
bonus_values = {
}

[sub_resource type="GDScript" id=7]
script/source = "extends Resource
class_name ItemData

enum InteractionMode { NONE, EXAMINE, CAPTCHA, WALK, ENTER }
# Simple string data for UI displays.
export (String) var name
export (Array, String, MULTILINE) var dialogue_bank
# LMB and RMB based interactions, used to reduce amount of boolean logic.
export (InteractionMode) var primary_interaction
export (InteractionMode) var secondary_interaction
export (Dictionary) var bonus_values

func get_dialogue(idx: int) -> String:
	if idx > dialogue_bank: return \"\"
	return dialogue_bank[idx]

func get_action_name(idx: int) -> String:
	match idx:
		0:
			return str(InteractionMode.keys()[primary_interaction])
		1:
			return str(InteractionMode.keys()[secondary_interaction])
	return \"\"
"

[sub_resource type="Resource" id=8]
script = SubResource( 7 )
name = "hall"
dialogue_bank = [  ]
primary_interaction = 4
secondary_interaction = 0
bonus_values = {
}

[node name="Node2D" type="Node2D"]
script = ExtResource( 8 )

[node name="Help" type="Sprite" parent="."]
visible = false
position = Vector2( 374, 229 )
texture = ExtResource( 3 )

[node name="Background" type="Sprite" parent="."]
position = Vector2( 325, 220 )
texture = ExtResource( 1 )

[node name="Perspective2D" type="Node2D" parent="."]
modulate = Color( 1, 1, 1, 0.478431 )
script = ExtResource( 5 )
rotation_offset = 15.0
preview_cone_size = 3.4
points = PoolVector2Array( 891, 95, -125, 85 )

[node name="Line2D" type="Line2D" parent="."]
visible = false
position = Vector2( 325, 220 )
points = PoolVector2Array( -381, -116, 563, -124 )
width = 0.5

[node name="Line2D2" type="Line2D" parent="."]
visible = false
position = Vector2( 325, 220 )
points = PoolVector2Array( -349, 68, 563, -124 )
width = 0.5

[node name="Line2D3" type="Line2D" parent="."]
visible = false
position = Vector2( 325, 220 )
points = PoolVector2Array( 515, -60, -453, -140 )
width = 5.0
default_color = Color( 1, 0.4, 0.552941, 1 )

[node name="Line2D4" type="Line2D" parent="."]
visible = false
position = Vector2( 325, 220 )
points = PoolVector2Array( 195, 324, -453, -140 )
width = 5.0
default_color = Color( 1, 0.4, 0.552941, 1 )

[node name="Navigation2D" type="Navigation2D" parent="."]

[node name="NavigationPolygonInstance" type="NavigationPolygonInstance" parent="Navigation2D"]
position = Vector2( 376, 232 )
navpoly = SubResource( 1 )

[node name="FranSprite" type="Sprite" parent="."]
visible = false
position = Vector2( 270, 229 )
scale = Vector2( -1, 1 )
texture = ExtResource( 4 )

[node name="Sprite" parent="." instance=ExtResource( 2 )]
position = Vector2( 431, 195 )
scale = Vector2( 0.439191, 0.439191 )
offset = Vector2( -0.806793, -115.764 )
global_scale_mod = 1
grid = NodePath("../Perspective2D")
nav_2d_path = NodePath("../Navigation2D")

[node name="Hall" type="Area2D" parent="."]
script = ExtResource( 6 )
item_data_stateless = SubResource( 2 )
item_data_stateful = {
"solved_puzzle1": SubResource( 4 ),
"solved_puzzle2": SubResource( 6 ),
"solved_puzzle3": SubResource( 8 )
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Hall"]
polygon = PoolVector2Array( 346, 184, 348, 38, 409, 45, 408, 173 )
