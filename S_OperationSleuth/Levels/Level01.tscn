[gd_scene load_steps=94 format=2]

[ext_resource path="res://Levels/hall_revamp.png" type="Texture" id=1]
[ext_resource path="res://addons/hivemake/Perspective2D.gd" type="Script" id=2]
[ext_resource path="res://Player/Player.tscn" type="PackedScene" id=3]
[ext_resource path="res://Objects/Level.gd" type="Script" id=4]
[ext_resource path="res://Levels/Railway.png" type="Texture" id=5]
[ext_resource path="res://Levels/tacky_poster.png" type="Texture" id=6]
[ext_resource path="res://Levels/columbo_01.png" type="Texture" id=7]
[ext_resource path="res://Levels/Interactor.gd" type="Script" id=8]
[ext_resource path="res://core/StateMachine.gd" type="Script" id=9]
[ext_resource path="res://core/State.gd" type="Script" id=10]
[ext_resource path="res://Items/Stairway/events_stairsDefault.tres" type="Resource" id=11]
[ext_resource path="res://TemplateInterActor.tscn" type="PackedScene" id=12]
[ext_resource path="res://Items/TackyPoster/events_posterNoAccess.tres" type="Resource" id=13]
[ext_resource path="res://Items/Lamp/events_lampDefault.tres" type="Resource" id=14]
[ext_resource path="res://core/EventSetCollide.gd" type="Script" id=15]
[ext_resource path="res://core/EventDisplayText.gd" type="Script" id=16]
[ext_resource path="res://core/EventSetState.gd" type="Script" id=17]
[ext_resource path="res://Items/Drawers/drawer_top.png" type="Texture" id=18]
[ext_resource path="res://Items/Drawers/drawer_bottom.png" type="Texture" id=19]
[ext_resource path="res://core/ElevationMask.tscn" type="PackedScene" id=20]
[ext_resource path="res://home_1.mp3" type="AudioStream" id=21]
[ext_resource path="res://Objects/Columbo.tres" type="Resource" id=22]
[ext_resource path="res://core/EventSetItem.gd" type="Script" id=23]

[sub_resource type="NavigationPolygon" id=1]
vertices = PoolVector2Array( 588, 391, 644, 431, 645, 445, 543, 444, 485, 359, 495, 252, 586, 318, 486, 256, 449, 259, 139, 357, 433, 252, 258, 252, 420, 239, 232, 274, 68, 444, 5, 444, 5, 358, 135, 277, 174, 279, 263, 240 )
polygons = [ PoolIntArray( 0, 1, 2, 3, 4 ), PoolIntArray( 5, 6, 0, 4, 7 ), PoolIntArray( 8, 7, 4, 9 ), PoolIntArray( 10, 8, 9 ), PoolIntArray( 11, 12, 10, 9, 13 ), PoolIntArray( 9, 14, 15, 16, 17, 18 ), PoolIntArray( 11, 19, 12 ), PoolIntArray( 9, 18, 13 ) ]
outlines = [ PoolVector2Array( 68, 444, 139, 357, 485, 359, 543, 444, 645, 445, 644, 431, 588, 391, 586, 318, 495, 252, 486, 256, 449, 259, 433, 252, 420, 239, 263, 240, 258, 252, 232, 274, 174, 279, 135, 277, 5, 358, 5, 444 ) ]

[sub_resource type="NavigationPolygon" id=78]
vertices = PoolVector2Array( 164, 213, 182, 213, 178, 239, 154, 238 )
polygons = [ PoolIntArray( 0, 1, 2, 3 ) ]
outlines = [ PoolVector2Array( 154, 238, 178, 239, 182, 213, 164, 213 ) ]

[sub_resource type="NavigationPolygon" id=77]
vertices = PoolVector2Array( 154, 238, 178, 239, 174, 279, 135, 277 )
polygons = [ PoolIntArray( 0, 1, 2, 3 ) ]
outlines = [ PoolVector2Array( 135, 277, 174, 279, 178, 239, 154, 238 ) ]

[sub_resource type="GDScript" id=4]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=5]
script = SubResource( 4 )
new_event_type = 0
add_new_event = false
events = [  ]

[sub_resource type="GDScript" id=6]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=7]
script = SubResource( 6 )
new_event_type = 0
add_new_event = false
events = [  ]

[sub_resource type="Resource" id=24]
script = ExtResource( 16 )
flags = 1
transitions = 1
text = "You examine the FURNITURE. Upon closer examination you find out the FURNITURE is COMPOSED of SHELVES (3) and DRAWERS (2)."

[sub_resource type="Resource" id=39]
script = ExtResource( 16 )
flags = 1
transitions = 2
text = "It appears that while the SHELVES are rather USELESS, you can INTERACT with the DRAWERS by OPENING and CLOSING them."

[sub_resource type="Resource" id=54]
script = ExtResource( 15 )
flags = 0
value = true
property_name = "input_pickable"
target = NodePath("../../../DrawerB")

[sub_resource type="Resource" id=55]
script = ExtResource( 15 )
flags = 0
value = false
property_name = "input_pickable"
target = NodePath("../..")

[sub_resource type="GDScript" id=8]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=9]
script = SubResource( 8 )
new_event_type = 1
add_new_event = false
events = [ SubResource( 24 ), SubResource( 39 ), SubResource( 54 ), SubResource( 55 ) ]

[sub_resource type="GDScript" id=10]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=11]
script = SubResource( 10 )
new_event_type = 0
add_new_event = false
events = [  ]

[sub_resource type="Resource" id=67]
script = ExtResource( 17 )
flags = 0
new_state = NodePath("../Open")

[sub_resource type="GDScript" id=65]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=66]
script = SubResource( 65 )
new_event_type = 0
add_new_event = false
events = [ SubResource( 67 ) ]

[sub_resource type="Resource" id=56]
script = ExtResource( 15 )
flags = 0
value = true
property_name = "input_pickable"
target = NodePath("../../../DrawerA")

[sub_resource type="Resource" id=70]
script = ExtResource( 15 )
flags = 0
value = true
property_name = "visible"
target = NodePath("../../DrawerBottom")

[sub_resource type="GDScript" id=35]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=36]
script = SubResource( 35 )
new_event_type = 1
add_new_event = false
events = [ SubResource( 56 ), SubResource( 70 ) ]

[sub_resource type="Resource" id=68]
script = ExtResource( 15 )
flags = 0
value = false
property_name = "input_pickable"
target = NodePath("../../../DrawerA")

[sub_resource type="Resource" id=83]
script = ExtResource( 15 )
flags = 0
value = false
property_name = "enabled"
target = NodePath("../../../Navigation2D/DrawerBottom")

[sub_resource type="GDScript" id=37]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=38]
script = SubResource( 37 )
new_event_type = 1
add_new_event = false
events = [ SubResource( 68 ), SubResource( 83 ) ]

[sub_resource type="Resource" id=72]
script = ExtResource( 17 )
flags = 0
new_state = NodePath("../Closed")

[sub_resource type="GDScript" id=40]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=41]
script = SubResource( 40 )
new_event_type = 0
add_new_event = false
events = [ SubResource( 72 ) ]

[sub_resource type="Resource" id=71]
script = ExtResource( 15 )
flags = 0
value = false
property_name = "visible"
target = NodePath("../../DrawerBottom")

[sub_resource type="GDScript" id=42]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=43]
script = SubResource( 42 )
new_event_type = 1
add_new_event = false
events = [ SubResource( 71 ) ]

[sub_resource type="Resource" id=84]
script = ExtResource( 15 )
flags = 0
value = true
property_name = "enabled"
target = NodePath("../../../Navigation2D/DrawerBottom")

[sub_resource type="GDScript" id=44]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=45]
script = SubResource( 44 )
new_event_type = 1
add_new_event = false
events = [ SubResource( 84 ) ]

[sub_resource type="Resource" id=74]
script = ExtResource( 17 )
flags = 0
new_state = NodePath("../Open")

[sub_resource type="GDScript" id=62]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=63]
script = SubResource( 62 )
new_event_type = 0
add_new_event = false
events = [ SubResource( 74 ) ]

[sub_resource type="GDScript" id=58]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=59]
script = SubResource( 58 )
new_event_type = 0
add_new_event = false
events = [  ]

[sub_resource type="Resource" id=75]
script = ExtResource( 15 )
flags = 0
value = false
property_name = "visible"
target = NodePath("../../DrawerTop")

[sub_resource type="Resource" id=80]
script = ExtResource( 15 )
flags = 0
value = false
property_name = "enabled"
target = NodePath("../../../Navigation2D/DrawerTop")

[sub_resource type="GDScript" id=60]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=61]
script = SubResource( 60 )
new_event_type = 1
add_new_event = false
events = [ SubResource( 75 ), SubResource( 80 ) ]

[sub_resource type="Resource" id=73]
script = ExtResource( 17 )
flags = 0
new_state = NodePath("../Closed")

[sub_resource type="GDScript" id=46]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=47]
script = SubResource( 46 )
new_event_type = 0
add_new_event = false
events = [ SubResource( 73 ) ]

[sub_resource type="GDScript" id=48]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=49]
script = SubResource( 48 )
new_event_type = 0
add_new_event = false
events = [  ]

[sub_resource type="Resource" id=76]
script = ExtResource( 15 )
flags = 0
value = true
property_name = "visible"
target = NodePath("../../DrawerTop")

[sub_resource type="Resource" id=79]
script = ExtResource( 15 )
flags = 0
value = true
property_name = "enabled"
target = NodePath("../../../Navigation2D/DrawerTop")

[sub_resource type="GDScript" id=50]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=51]
script = SubResource( 50 )
new_event_type = 1
add_new_event = false
events = [ SubResource( 76 ), SubResource( 79 ) ]

[sub_resource type="Resource" id=86]
script = ExtResource( 15 )
flags = 0
value = false
property_name = "visible"
target = NodePath("../../Sprite")

[sub_resource type="Resource" id=87]
script = ExtResource( 15 )
flags = 0
value = false
property_name = "input_pickable"
target = NodePath("../..")

[sub_resource type="Resource" id=88]
script = ExtResource( 23 )
flags = 0
set_mode = 0
item_data = ExtResource( 22 )

[sub_resource type="Resource" id=89]
script = ExtResource( 15 )
flags = 0
value = true
property_name = "input_pickable"
target = NodePath("../../../MomRoom")

[sub_resource type="GDScript" id=2]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=3]
script = SubResource( 2 )
new_event_type = 1
add_new_event = false
events = [ SubResource( 86 ), SubResource( 87 ), SubResource( 88 ), SubResource( 89 ) ]

[sub_resource type="GDScript" id=14]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=15]
script = SubResource( 14 )
new_event_type = 0
add_new_event = false
events = [  ]

[sub_resource type="GDScript" id=16]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=17]
script = SubResource( 16 )
new_event_type = 0
add_new_event = false
events = [  ]

[sub_resource type="AnimationNodeStateMachinePlayback" id=85]

[sub_resource type="GDScript" id=18]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=19]
script = SubResource( 18 )
new_event_type = 0
add_new_event = false
events = [  ]

[sub_resource type="GDScript" id=20]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=21]
script = SubResource( 20 )
new_event_type = 0
add_new_event = false
events = [  ]

[sub_resource type="GDScript" id=22]
script/source = "extends Resource
class_name EventSheet

signal act_complete
signal auth_complete

enum EventTypes { 
	SET_STATE, 
	SET_COLLIDE, 
	SET_ITEM,
	DISPLAY_TEXT, 
	DISPLAY_ANIMATION,
	}

const ONE_SHOT = Event.EventFlags.ONE_SHOT
const CHAIN_BREAK = Event.EventFlags.CHAIN_BREAK
const AWAIT_INPUT = Event.EventFlags.AWAIT_INPUT

export (EventTypes) var new_event_type
export (bool) var add_new_event
export (Array, Resource) var events

func play_events():
	var i = 0
	while i < events.size():
		var flags = events[i].flags 
		events[i].exec()
		if flags & AWAIT_INPUT:
			yield(InterfaceManager, \"input_given\")

		if ((flags & CHAIN_BREAK ) >> 1 ) & (flags & ONE_SHOT):
			print(\"CBOS \", flags)
			events.remove(i)
			i -= 1
			break
		if flags & CHAIN_BREAK:
			print(\"CB\")
			break
		if flags & ONE_SHOT:
			print(\"OS\")
			events.remove(i)
			i -= 1
		i += 1
"

[sub_resource type="Resource" id=23]
script = SubResource( 22 )
new_event_type = 0
add_new_event = false
events = [  ]

[node name="Node2D" type="Node2D"]
script = ExtResource( 4 )

[node name="HallRevamp" type="Sprite" parent="."]
position = Vector2( 325, -15 )
scale = Vector2( 1.00444, 1.00444 )
texture = ExtResource( 1 )
offset = Vector2( 0.000366211, 238.939 )

[node name="Perspective2D" type="Node2D" parent="."]
visible = false
position = Vector2( 0, -1 )
script = ExtResource( 2 )
preview_cone_size = 4.0
points = PoolVector2Array( 331, 136 )

[node name="Area2D" parent="." instance=ExtResource( 20 )]
position = Vector2( 165, 244 )
z_index = 3

[node name="Line2D" parent="Area2D" index="1"]
visible = false
points = PoolVector2Array( -13, 34, 2, 14 )

[node name="Navigation2D" type="Navigation2D" parent="."]
z_index = 4

[node name="NavigationPolygonInstance" type="NavigationPolygonInstance" parent="Navigation2D"]
navpoly = SubResource( 1 )

[node name="DrawerTop" type="NavigationPolygonInstance" parent="Navigation2D"]
navpoly = SubResource( 78 )
enabled = false

[node name="DrawerBottom" type="NavigationPolygonInstance" parent="Navigation2D"]
navpoly = SubResource( 77 )
enabled = false

[node name="Stairway" type="Area2D" parent="."]
priority = 1.0
script = ExtResource( 8 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Stairway"]
polygon = PoolVector2Array( 135, 452, 122, 292, 129, 268, 156, 263, 361.396, 263.667, 464, 264, 673, 454 )

[node name="StateMachine" type="Node" parent="Stairway"]
script = ExtResource( 9 )
default_state = NodePath("Default")

[node name="Default" type="Node" parent="Stairway/StateMachine"]
script = ExtResource( 10 )
clicked = ExtResource( 11 )
exit_logic = SubResource( 5 )
enter_logic = SubResource( 7 )
hover_prompt = "Peek down"
item_name = "the stairway"

[node name="Lamp" type="Area2D" parent="."]
script = ExtResource( 8 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Lamp"]
polygon = PoolVector2Array( 286, 85, 300, 93, 317, 95, 331, 95, 349, 95, 363, 92, 374, 87, 378, 82, 369, 71, 353, 60, 336, 54, 323, 54, 313, 57, 301, 63, 292, 69, 284, 78, 283, 82 )

[node name="StateMachine" type="Node" parent="Lamp"]
script = ExtResource( 9 )

[node name="State" type="Node" parent="Lamp/StateMachine"]
script = ExtResource( 10 )
clicked = ExtResource( 14 )
exit_logic = SubResource( 5 )
enter_logic = SubResource( 7 )
hover_prompt = "Look at"
item_name = "lamp"

[node name="Furniture" type="Area2D" parent="."]
script = ExtResource( 8 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Furniture"]
polygon = PoolVector2Array( 234, 138, 215, 133, 148, 133, 146, 136, 146, 234.074, 146, 257, 212, 257, 234, 234 )

[node name="StateMachine" type="Node" parent="Furniture"]
script = ExtResource( 9 )

[node name="State" type="Node" parent="Furniture/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 9 )
exit_logic = SubResource( 11 )
enter_logic = SubResource( 7 )
hover_prompt = "Examine"
item_name = "furniture"

[node name="DrawerB" type="Area2D" parent="."]
input_pickable = false
priority = 2.0
script = ExtResource( 8 )

[node name="ClosedPoly" type="CollisionPolygon2D" parent="DrawerB"]
polygon = PoolVector2Array( 203, 230, 153, 231, 153, 246, 203, 246 )

[node name="DrawerBottom" type="Sprite" parent="DrawerB"]
visible = false
position = Vector2( 166, 247 )
texture = ExtResource( 19 )

[node name="StateMachine" type="Node" parent="DrawerB"]
script = ExtResource( 9 )
default_state = NodePath("Closed")

[node name="Closed" type="Node" parent="DrawerB/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 66 )
exit_logic = SubResource( 36 )
enter_logic = SubResource( 38 )
hover_prompt = "Open"
item_name = "lower drawer"

[node name="Open" type="Node" parent="DrawerB/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 41 )
exit_logic = SubResource( 43 )
enter_logic = SubResource( 45 )
hover_prompt = "Close"
item_name = "lower drawer"

[node name="DrawerA" type="Area2D" parent="."]
input_pickable = false
priority = 2.0
script = ExtResource( 8 )

[node name="ClosedPoly" type="CollisionPolygon2D" parent="DrawerA"]
polygon = PoolVector2Array( 204, 210, 153, 210, 153, 226, 204, 226 )

[node name="StateMachine" type="Node" parent="DrawerA"]
script = ExtResource( 9 )
default_state = NodePath("Closed")

[node name="Closed" type="Node" parent="DrawerA/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 63 )
exit_logic = SubResource( 59 )
enter_logic = SubResource( 61 )
hover_prompt = "Open"
item_name = "upper drawer"

[node name="Open" type="Node" parent="DrawerA/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 47 )
exit_logic = SubResource( 49 )
enter_logic = SubResource( 51 )
hover_prompt = "Close"
item_name = "upper drawer"

[node name="DrawerTop" type="Sprite" parent="DrawerA"]
visible = false
position = Vector2( 169, 222 )
texture = ExtResource( 18 )

[node name="MrLumpybutt" type="Area2D" parent="."]
priority = 1.0
script = ExtResource( 8 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="MrLumpybutt"]
polygon = PoolVector2Array( 154, 145, 158, 147, 164, 146, 169, 143, 171, 147, 176, 149, 181, 149, 185, 147, 187, 145, 187, 135, 191, 133, 195, 131, 197, 127, 200, 123, 208, 123, 210, 119, 209, 114, 204, 109, 199, 105, 202, 101, 202, 98, 200, 91, 204, 88, 205, 85, 204, 81, 201, 78, 197, 79, 195, 81, 193, 79, 190, 76, 185, 75, 180, 77, 177, 79, 176, 76, 170, 76, 168, 77, 167, 81, 168, 87, 170, 89, 168, 91, 167, 97, 168, 101, 170, 103, 170, 105, 167, 106, 164, 108, 162, 111, 160, 113, 159, 116, 159, 121, 156, 125, 154, 130, 153, 138, 153, 142 )

[node name="StateMachine" type="Node" parent="MrLumpybutt"]
script = ExtResource( 9 )

[node name="State" type="Node" parent="MrLumpybutt/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 3 )
exit_logic = SubResource( 5 )
enter_logic = SubResource( 7 )
hover_prompt = "Look at"
item_name = "plush bear."

[node name="Tree" type="Area2D" parent="."]
priority = 1.0
script = ExtResource( 8 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Tree"]
polygon = PoolVector2Array( 455, 193, 445, 195, 439, 186, 419, 187, 404, 160, 409, 139, 402, 123, 410, 108, 423, 103, 420, 88, 439, 70, 460, 79, 471, 79, 484, 72, 511, 89, 507, 106, 522, 121, 519, 134, 528, 143, 525, 156, 514, 159, 509, 178, 498, 180, 486, 188, 483, 191, 471, 193, 471, 206, 480, 207, 491, 209, 495, 212, 494, 218, 493, 221, 491, 222, 486, 247, 472, 254, 461, 254, 449, 253, 440, 248, 437, 244, 433, 221, 431, 219, 429, 211, 439, 208, 448, 207, 454, 206, 455, 205 )

[node name="StateMachine" type="Node" parent="Tree"]
script = ExtResource( 9 )

[node name="State" type="Node" parent="Tree/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 3 )
exit_logic = SubResource( 5 )
enter_logic = SubResource( 7 )
hover_prompt = "Look at"
item_name = "tree"

[node name="OtherPoster" type="Area2D" parent="."]
script = ExtResource( 8 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="OtherPoster"]
polygon = PoolVector2Array( 382, 187, 415, 187, 415, 137, 383, 137 )

[node name="StateMachine" type="Node" parent="OtherPoster"]
script = ExtResource( 9 )

[node name="State" type="Node" parent="OtherPoster/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 3 )
exit_logic = SubResource( 5 )
enter_logic = SubResource( 7 )
hover_prompt = "Look at"
item_name = "poster"

[node name="TackyRug" type="Area2D" parent="."]
script = ExtResource( 8 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="TackyRug"]
polygon = PoolVector2Array( 329, 270, 319, 262, 305, 256, 280, 256, 257, 262, 248, 278, 250, 290, 269, 300, 327, 325, 383, 300, 406, 289, 411, 275, 393, 260, 374, 257, 343, 257, 334, 263 )

[node name="StateMachine" type="Node" parent="TackyRug"]
script = ExtResource( 9 )

[node name="State" type="Node" parent="TackyRug/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 3 )
exit_logic = SubResource( 5 )
enter_logic = SubResource( 7 )
hover_prompt = "Look at"

[node name="Closet" type="Area2D" parent="."]
script = ExtResource( 8 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Closet"]
polygon = PoolVector2Array( 294, 231, 367, 231, 366, 113, 294, 113 )

[node name="StateMachine" type="Node" parent="Closet"]
script = ExtResource( 9 )

[node name="State" type="Node" parent="Closet/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 3 )
exit_logic = SubResource( 5 )
enter_logic = SubResource( 7 )
hover_prompt = "Examine"
item_name = "closet"

[node name="Bedroom" type="Area2D" parent="."]
script = ExtResource( 8 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Bedroom"]
polygon = PoolVector2Array( 29, 321, 30, 94, 115, 108, 116, 269 )

[node name="StateMachine" type="Node" parent="Bedroom"]
script = ExtResource( 9 )

[node name="State" type="Node" parent="Bedroom/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 3 )
exit_logic = SubResource( 5 )
enter_logic = SubResource( 7 )
hover_prompt = "Enter"
item_name = "bedroom"

[node name="TackyPoster" parent="." instance=ExtResource( 12 )]

[node name="CollisionPolygon2D" parent="TackyPoster" index="0"]
polygon = PoolVector2Array( 247, 137, 265, 127, 282, 136, 282, 186, 246, 186 )

[node name="State" type="Node" parent="TackyPoster/StateMachine" index="0"]
script = ExtResource( 10 )
clicked = ExtResource( 13 )
exit_logic = SubResource( 15 )
enter_logic = SubResource( 17 )
hover_prompt = "Examine"
item_name = "tacky poster"

[node name="TackyPoster" type="Sprite" parent="TackyPoster"]
position = Vector2( 264, 157 )
texture = ExtResource( 6 )

[node name="MomRoom" type="Area2D" parent="."]
scale = Vector2( 1.00213, 0.996302 )
input_pickable = false
priority = 1.0
script = ExtResource( 8 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="MomRoom"]
polygon = PoolVector2Array( 595.731, 312.154, 542.844, 279.032, 542.844, 108.401, 629.659, 97.36, 632.652, 163.605, 597.727, 167.62 )

[node name="StateMachine" type="Node" parent="MomRoom"]
script = ExtResource( 9 )

[node name="State" type="Node" parent="MomRoom/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 3 )
exit_logic = SubResource( 5 )
enter_logic = SubResource( 7 )
hover_prompt = "Enter"
item_name = "mom's room."

[node name="Player" parent="." instance=ExtResource( 3 )]
position = Vector2( 324, 302 )
scale = Vector2( 0.558824, 0.558824 )
nav_2d_path = NodePath("../Navigation2D")
path_offset = 64.0
move_speed = 130.0

[node name="CollisionShape2D" parent="Player" index="0"]
position = Vector2( 0, 9 )

[node name="Sprite" parent="Player" index="1"]
position = Vector2( 0, -3.579 )
scale = Vector2( 0.924811, 0.924811 )
global_scale_mod = 0.75
grid = NodePath("../../Perspective2D")

[node name="AnimationTree" parent="Player/Sprite" index="0"]
parameters/playback = SubResource( 85 )

[node name="Columbo" type="Area2D" parent="."]
position = Vector2( 582, 377 )
z_index = 1
priority = 2.0
script = ExtResource( 8 )

[node name="Sprite" type="Sprite" parent="Columbo"]
position = Vector2( 25.0535, -123.383 )
scale = Vector2( 0.976635, 0.976635 )
texture = ExtResource( 7 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Columbo"]
position = Vector2( 25.0535, -123.383 )
scale = Vector2( 0.976635, 0.976635 )
polygon = PoolVector2Array( 11, -197.4, 11, -195.8, 35, -185.8, 35, -183.2, 43, -172.2, 43, -159.5, 41, -159.5, 41, -145.5, 39.9, -145.5, 40.4, -145, 39.3, -142.5, 37.7, -142.5, 27.1, -135.5, 27.4, -134.5, 65, -110.6, 65, -108.9, 70.2, -97.5, 70.9, -97.5, 90.9, -75.5, 92.6, -75.5, 102, -69.6, 102, -67.9, 106.5, -46.5, 104.2, -46.5, 102.2, -42.5, 88, -42.5, 88, -44.2, 66, -54.2, 66, -57.5, 60.4, -61.5, 58.5, -61.5, 58, -61.2, 58, -60.3, 56.4, -49.5, 59.2, -18.5, 57.8, -18.5, 53.8, 24.5, 50.8, 24.5, 37.1, 22, 38.2, 34.5, 36.8, 34.5, 23.8, 142.5, 22.4, 142.5, 20.4, 148.5, 17.3, 148.5, 20, 158.2, 20, 162.6, 19.2, 170.5, 31.1, 197.5, 21, 197.5, 21, 196.9, 3, 190.9, 3, 188.5, -20, 170.5, -20, 167.1, -19, 164.5, -39, 164.5, -41.6, 172.5, -44.4, 172.5, -47.4, 174.5, -49.4, 174.5, -72, 164.8, -72, 160.5, -74.6, 150.5, -71.8, 150.5, -61.1, 139.8, -66, 131, -66, 126.5, -70, 95.6, -70, 93.3, -81, 78.2, -81, 76.9, -85, 66.9, -85, 56.5, -84, 27.5, -82.5, 27.5, -78, 8.5, -78, 5.8, -83, -6.10001, -83, -24.5, -81.1, -24.5, -107, -43.1, -107, -52.2, -102.5, -67.5, -100.6, -67.5, -84, -79.5, -84, -81.2, -71, -96.2, -71, -100.3, -67, -104.3, -67, -106.5, -68.6, -112.5, -65.7, -112.5, -63, -114.5, -61.6, -121.5, -59, -121.5, -59, -123.6, -57.9, -138.5, -55.5, -138.5, -41.5, -145.5, -39.9, -145.5, -26, -144.6, -13.5, -150.5, -17, -155.9, -17, -159.7, -16.5, -162.5, -22.7, -182.5, -19.7, -182.5, -17, -184.5, -17, -187.7, -15.6, -193.5, -13.5, -193.5, -10, -195.6, -10, -197.5, 9.2, -197.5 )

[node name="StateMachine" type="Node" parent="Columbo"]
script = ExtResource( 9 )

[node name="State" type="Node" parent="Columbo/StateMachine"]
script = ExtResource( 10 )
clicked = SubResource( 3 )
exit_logic = SubResource( 5 )
enter_logic = SubResource( 7 )
hover_prompt = "Pick up"
item_name = "Columbo cutout"

[node name="Template" parent="." instance=ExtResource( 12 )]
z_index = 2
priority = 4.0

[node name="CollisionPolygon2D" parent="Template" index="0"]
polygon = PoolVector2Array( 443, 278, 443, 283, 448, 283, 448, 278 )

[node name="State" type="Node" parent="Template/StateMachine" index="0"]
script = ExtResource( 10 )
clicked = SubResource( 19 )
exit_logic = SubResource( 21 )
enter_logic = SubResource( 23 )
hover_prompt = "Screech like a lunatic and shit over the"
item_name = "guardrail"

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 0, 52 )
anchor_mode = 0
current = true

[node name="Railway" type="Sprite" parent="."]
position = Vector2( 386, 357 )
z_index = 1
texture = ExtResource( 5 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 21 )
volume_db = -12.5

[editable path="Area2D"]
[editable path="TackyPoster"]
[editable path="Player"]
[editable path="Template"]
